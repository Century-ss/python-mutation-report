name: "Hello World"
description: "Greet someone"
inputs:
  lock_file_path:
    description: "path of lock file to generate requirements.txt"
    required: true
  src_directory:
    description: "path of source directory to be muted"
    required: true
  test_directory:
    description: "path of test directory"
    required: true
# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }} # TODO: If except pull_request, use ${{ github.ref or ref_name }}

    - name: Validate input parameters is not empty
      run: |
        [[ "${{ inputs.lock_file_path }}" ]] || { echo "Error lock_file_path input is empty" ; exit 1; }
        [[ "${{ inputs.src_directory }}" ]] || { echo "Error src_directory input is empty" ; exit 1; }
        [[ "${{ inputs.test_directory }}" ]] || { echo "Error test_directory input is empty" ; exit 1; }
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Generate requirements.txt
      run: python3 scripts/generate_requirements_from_pipfile.py
      env:
        LOCK_FILE_PATH: ${{ inputs.lock_file_path }}
      shell: bash

    - name: Debug requirements.txt
      run: cat requirements.txt
      shell: bash

    - name: Install dependencies
      run: |
        pip install --no-cache-dir -r requirements.txt
        pip install mutmut==2.4.4
        pip install pytest
      shell: bash
      # pytest may not need to be installed if it is already installed in the lock file

    - name: Execute mutation test
      run: |
        mutmut run --paths-to-mutate ${{ inputs.src_directory }} \
          --runner "pytest ${{ inputs.test_directory }}" \
          --tests-dir ${{ inputs.test_directory }} > results/run_result.txt
      shell: bash
      continue-on-error: true
      # If all mutants cannot be killed, an error occurs with an exit code of 2.
      # Even if an error occurs, continue-on-error is required to allow subsequent steps to be performed

    - name: Output mutation test results to a text file.
      run: |
        mutmut show all > results/show_all_result.txt
        cat results/show_all_result.txt
      shell: bash

    - name: Reshape result for PR comment
      run: python3 scripts/reshape_result_for_PR_comment.py
      shell: bash

    # - name: Show github context and environment variable
    #   run: |
    #     echo '${{ toJSON(github) }}'
    #     printenv
    #   shell: bash

    - name: Post comments to PR
      # if: ${{ success() && github.event_name == 'pull_request' }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        URL: ${{ github.event.pull_request.html_url }}
      run: gh pr comment -F PR_comment.txt "${URL}"
      shell: bash

    # - name: Upload artifact text file?
    #   if: ${{ success() && github.event_name != 'pull_request' }}
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #     URL: ${{ github.event.pull_request.html_url }}
    #   run: gh pr comment -F result.txt "${URL}"
