name: "Hello World"
description: "Greet someone"
inputs:
  lock-file-path:
    description: "Path of lock file to generate requirements.txt"
    required: true
  src-directory:
    description: "Path of source directory to be muted"
    required: true
  test-directory:
    description: "Path of test directory"
    required: true
  where-to-run-test:
    description: "Where to run the test. If none is specified, run from the root directory."
    required: false
    default: "."
  python-version:
    description: "Python version to use. Default is 3.11."
    required: false
    default: "3.11"
# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Validate input parameters is not empty
      run: |
        [[ "${{ inputs.lock-file-path }}" ]] || { echo "Error lock-file-path input is empty" ; exit 1; }
        [[ "${{ inputs.src-directory }}" ]] || { echo "Error src-directory input is empty" ; exit 1; }
        [[ "${{ inputs.test-directory }}" ]] || { echo "Error test-directory input is empty" ; exit 1; }
      shell: bash

    - name: Tree before checkout
      run: tree -a
      shell: bash

    - name: Checkout caller repository
      uses: actions/checkout@v4

    # - name: Tree between checkout
    #   run: tree -a
    #   shell: bash

    # # if external repository already checked out, it is not necessary to checkout?
    # - name: Checkout python-mutesting-report repository
    #   uses: actions/checkout@v4
    #   with:
    #     repository: Century-ss/python-mutation-report
    #     path: "${{ inputs.where-to-run-test }}/Century-ss/python-mutesting-report"
    #     sparse-checkout: |
    #       scripts
    #       temporary
    #     sparse-checkout-cone-mode: false
    #     # ref: ${{ github.head_ref }} # TODO: If except pull_request, use ${{ github.ref or ref_name }}

    # - name: Tree after checkout
    #   run: |
    #     cd ~/work
    #     tree -a
    #   shell: bash

    - name: Get change file list
      env:
        GITHUB_TOKEN: ${{ github.token }}
        URL: ${{ github.event.pull_request.html_url }}
      run: |
        cd "${{ github.action_path }}"
        gh pr diff "${URL}" --name-only > temporary/PR_diff_files.txt
      # Strings with \n cannot be set in $GITHUB_OUTPUT or $GITHUB_ENV, so use a text file instead.
      shell: bash

    - name: Debug
      run: |
        cd "${{ github.action_path }}"
        cat temporary/PR_diff_files.txt
      shell: bash

    - name: Make mutmut run command from PR changed files
      # It needs to be run from the root of the repository as it retrieves the files under src and test with glob.
      run: python3 "${{ github.action_path }}/scripts/make_command_of_run.py"
      env:
        SRC_DIRECTORY: ${{ inputs.src-directory }}
        TEST_DIRECTORY: ${{ inputs.test-directory }}
        WHERE_TO_RUN_TEST: ${{ inputs.where-to-run-test }}
        COMPOSITE_ACTIONS_PATH: ${{ github.action_path }}
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "${{ inputs.python-version }}"

    - name: Generate requirements.txt
      # Uses the path of the lock file from root, so must be run from root.
      run: python3 "${{ github.action_path }}/scripts/generate_requirements_from_pipfile.py"
      env:
        LOCK_FILE_PATH: ${{ inputs.lock-file-path }}
      shell: bash

    - name: Debug requirements.txt
      run: cat requirements.txt
      shell: bash

    - name: Install dependencies
      run: |
        pip3 install --no-cache-dir -r requirements.txt
        pip3 install mutmut==2.4.4
        pip3 install beautifulsoup4==4.12.3
        pip3 install pytest
      shell: bash
      # pytest may not need to be installed if it is already installed in the lock file

    - name: Create __init__.py in test directory
      run: |
        cd "${{ inputs.test-directory }}"
        find . -name '__pycache__' -prune -o -type d -exec touch {}/__init__.py \;
      shell:
        bash
        # find . \( -name '__pycache__' -o -name 'Century-ss' \) -prune -o -type d -exec touch {}/__init__.py \;

    - name: cat mutmut-run.sh
      run: cat "${{ github.action_path }}/temporary/mutmut-run.sh"
      shell: bash

    - name: Execute mutation test
      run: |
        cd "${{ inputs.where-to-run-test }}"
        bash "${{ github.action_path }}/temporary/mutmut-run.sh"
      shell: bash
      continue-on-error: true
      # If all mutants cannot be killed, an error occurs with an exit code of 2.
      # Even if an error occurs, continue-on-error is required to allow subsequent steps to be performed

    - name: Debug run.txt
      run: cat "${{ github.action_path }}/temporary/run.txt"
      shell: bash

    - name: Debug tree
      run: tree -a
      shell: bash

    - name: Output mutation test result to a text file.
      run: |
        cd "${{ inputs.where-to-run-test }}"
        mutmut html
        mutmut junitxml --suspicious-policy=error > "${{ github.action_path }}/temporary/junit.xml"
      shell: bash
      # Move html directory to temporary directory?

    - name: Reshape result for PR comment
      run: python3 "${{ github.action_path }}/scripts/reshape_result_for_PR_comment.py"
      env:
        COMPOSITE_ACTIONS_PATH: ${{ github.action_path }}
      shell: bash

    - name: Post comments to PR
      # if: ${{ success() && github.event_name == 'pull_request' }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        URL: ${{ github.event.pull_request.html_url }}
      run: gh pr comment -F "${{ github.action_path }}/PR_comment.txt" "${URL}"
      shell: bash

    # - name: Upload artifact text file?
    #   if: ${{ success() && github.event_name != 'pull_request' }}
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #     URL: ${{ github.event.pull_request.html_url }}
    #   run: gh pr comment -F result.txt "${URL}"

    # - name: Show github context and environment variable
    #   run: |
    #     echo '${{ toJSON(github) }}'
    #     printenv
    #   shell: bash
