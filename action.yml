name: "Hello World"
description: "Greet someone"
inputs:
  lock_file_path:
    description: "path of lock file to generate requirements.txt"
    required: true
  src_directory:
    description: "path of source directory to be muted"
    required: true
  test_directory:
    description: "path of test directory"
    required: true
# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Validate input parameters is not empty
      run: |
        [[ "${{ inputs.lock_file_path }}" ]] || { echo "Error lock_file_path input is empty" ; exit 1; }
        [[ "${{ inputs.src_directory }}" ]] || { echo "Error src_directory input is empty" ; exit 1; }
        [[ "${{ inputs.test_directory }}" ]] || { echo "Error test_directory input is empty" ; exit 1; }
      shell: bash

    # - name: Checkout
    #   uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Generate requirements.txt
      run: python scripts/generate_requirements.py
      env:
        LOCK_FILE_PATH: ${{ inputs.lock_file_path }}
      shell: bash

    - name: Debug requirements.txt
      run: cat requirements.txt
      shell: bash

    - name: Install dependencies
      run: |
        pip install --no-cache-dir -r requirements.txt
        pip install mutmut
        pip install pytest
      shell: bash
      # pytest may not need to be installed if it is already installed in the lock file

    - name: Execute mutation test
      run: mutmut run --paths-to-mutate ${{ inputs.src_directory }} --runner "pytest ${{ inputs.test_directory }}" --tests-dir ${{ inputs.test_directory }}
      shell: bash
      continue-on-error: true
      # If all mutants cannot be killed, an error occurs with an exit code of 2.
      # Even if an error occurs, continue-on-error is required to allow subsequent steps to be performed

    - name: Output mutation test results to a text file.
      run: |
        mutmut show all > result.txt
        cat result.txt
      shell: bash

    - name: Show github event name
      run: echo '${{ toJSON(github) }}'
      shell: bash

    # - name: Post comments
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #     URL: ${{ github.event.pull_request.html_url }}
    #   run: gh pr comment -F result.txt "${URL}"
